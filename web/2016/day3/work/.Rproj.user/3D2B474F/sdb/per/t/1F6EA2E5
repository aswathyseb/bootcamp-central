{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Bootstrapping RNA-seq Data\"\nauthor: \"Naomi S. Altman\"\ndate: \"June 7, 2016\"\noutput: html_document\n---\n# Introduction\nWe will do an example of a bootstrapping for RNA-seq data collected for a differential expression analysis.\n\n# The Data\nBlekhman, et al, (2010) used RNA-seq to interrogate liver samples in male and female human, chimpanzee and Rhesus macaque.  \nSamples were mapped to the human genome for read identification.  This is described in the supplement to the paper.  \nAs in any cross-species comparison, differences in \nsample characteristics and the underlying genome are confounded with expression differences.  The similarity in coding region is about 98% for humans and chimpanzees, but it is undoubtedly less for Rhesus macaques.\n\n\nThere were 3 biological replicates of each combination of gender and species, each divided in 2 sequencing lanes.  20689 features were tabulated in each of the 36 lanes,\nwith a total of 71 million mappable 35 bp reads. (This is an \"old\" dataset - typically now each sample will have about 25 million reads with minimum length 50 bp.) The raw reads are downloadable from GEO dataset GSE17274.  The processed counts per feature\ncan be downloaded from http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE17274.\n\nIn this example, I preprocessed the data by adding the reads across the 2 lanes per sample.  (In more recent studies, we would preprocess by splitting bar-coded data from individual lanes into individual samples.) As well, I removed genes that have 10 or fewer than 10 reads across all the samples, and reduce the data to just human and chimpanzee.\n\n\nTo start, we need to load the data into R from the csv text file\n\n```{r readData}\nReadCounts=read.csv(\"liverReads.csv\",header=T,row.names=1)\nReadCounts[1:5,1:5]\ndim(ReadCounts)\n```\n\nWe have N=12 samples, with n=6 samples for each condition=species.  We have `r nrow(ReadCounts)` genes.\n\n## Generating a Resampling Bootstrap Sample\n\nThe resampling bootstrap is the simplest method for creating synthetic data.\n\nTo generate a sample from the null distribution, we simply select 12 samples with replacement from the 12 original samples.  We would retain the species label.\n\n```{r nullResample}\nsamp=sample(1:12,12,replace=TRUE)\nbReadCounts=ReadCounts[,samp]\ncolnames(bReadCounts)=colnames(ReadCounts)\n```\n\nThis produces a single sample from the multivariate null distribution.  It preserves the distribution of gene expression in each gene and also the correlation structure.\n\nWe repeat this several thousand times to obtain an estimate of the multivariate distribution of any statistical test under the null hypothesis.  \n\nNotice that the library sizes are also maintained.\n\nWe could use these bootstrap samples in various ways.\n\ne.g. We could do a differential expression analysis using our favorite RNA-seq software such as *cuffdiff*, *edgeR* or *DESeq*.  However, we could adjust our p-values or FDR estimates using these samples from the null.\n\n\nTo generate a sample from the non-Null distribution, we sample with replacement from the original species labels.  Humans are in columns 1:6 and chimpanzees are in columns 7:12.\n\n```{r nonNullResample}\nsamp=c(sample(1:6,6,replace=TRUE),sample(7:12,6,replace=TRUE))\nbReadCounts=ReadCounts[,samp]\ncolnames(bReadCounts)=colnames(ReadCounts)\n```\n\nWe could use these samples to obtain confidence intervals for the effect sizes for each gene.\n\n## Generating a Noisy Resampling Bootstrap Sample\n\nWe want to generate Poisson random counts using the observed counts as the mean.\n\nWe need to change the zeroes in the count data to 0.25 and also store the data as a matrix instead of a dataframe.  We also need to compute the number of entries in the matrix which we call *nn*.\n\n```{r adjustReads}\nReadCountsAdj=as.matrix(ReadCounts)\nReadCountsAdj=ReadCountsAdj-.3\nReadCountsAdj[ReadCountsAdj<0]=0.25\nnn=nrow(ReadCountsAdj)*ncol(ReadCountsAdj)\n```\n\nWe now have a matrix with our Poisson means.  The Poisson random number generator can simultaneously generate *nn* random Poisson counts with *nn* different means.  However, we need to reorganize these into the data matrix.\n\n```{r NoisyBootstrap}\nbNoisyReads=matrix(rpois(nn,ReadCountsAdj),ncol=ncol(ReadCountsAdj))\n```\n\nLets have a look at how these compare to the actual read counts and the adjusted read counts.\n\n```{r compareCounts}\nReadCounts[1:5,1:5]    # actual data\nReadCountsAdj[1:5,1:5] # estimated Poisson means\nbNoisyReads[1:5,1:5]   # synthetic data\n```\n\nFinally, lets have a look at what happened to the library sizes:\n\n```{r compareLibSizes}\ncolSums(ReadCounts)\ncolSums(bNoisyReads)\n```\n\nWe see that we have done a fairly good job of reproducing at least one feature of the data (library size) even though we added noise.\n\nBy generating many bootstrap samples, we could e.g. create confidence intervals for quantities estimated from the data.\n\n## Generating a Parametric Bootstrap\n\nWe start by generating data from the Null distribution. We will estimate a mean and variance of the percentages for each gene.\n\nWe start by replacing the zeroes by 0.25.\n\n```{r replace0}\nReadCounts0=as.matrix(ReadCounts)\nReadCounts0[ReadCounts0==0]=.25\n```\n\nWe also need the library sizes, which are the total reads for each sample (column).\n\n```{r LibSize}\nlibSizes=colSums(ReadCounts0)\n```\n\nNext we convert all the counts to proportions within each column:\n\n```{r proportion}\nReadProp=ReadCounts0\nfor (i in 1:ncol(ReadCounts0)) ReadProp[,i]=ReadCounts0[,i]/libSizes[i]\n```\n\nTo generate a parametric bootstrap sample under the Null distribution, we assume that all the proportions for a single gene (row) come from the same distribution\n\n\n```{r meanVar}\nmeans=rowMeans(ReadProp)\nSDs=apply(ReadProp,1,sd)\n```\n\nThese data have an unusual feature, a few genes make up a large percentage of the data.  These genes also have very large SD.\n\n```{r bigGenes}\noGenes=order(means,decreasing=TRUE)\nmedian(means)\nhead(means[oGenes[1:10]])\nmedian(SDs)\nhead(SDs[oGenes[1:10]])\n```\n\nWhile it might make sense to transform the means and SDs of the proportions into the parameters of a distribution like the Beta, which generates data between 0 and 1, this method did not work well for these data, as it created distributions for some genes that essentially had only 1 proportion.  Instead, we add Normal noise, scaled by the SD, to the mean.  After scaling up by the library size to obtain a mean count, we replaced all the means that are less than 0.25 by 0.25.\n\n```{r genProportions}\nbProp=ReadProp\nbMeans=bProp\nfor (i in 1:nrow(ReadProp)) bProp[i,]=rnorm(ncol(ReadProp),means[i],SDs[i])\nfor (i in 1:ncol(bProp))  bMeans[,i]=bProp[,i]*libSizes[i]\nbMeans[bMeans<=0.25]=0.25\n```\n\nFinally, we generate our samples as Poisson with our generated mean count.  (Note that it is important tat bMeans is a matrix and not a dataframe.)\n\n```{r PoissonSamps}\nbReads=matrix(rpois(nn,bMeans),ncol=ncol(bMeans))\ncolnames(bReads)=colnames(ReadCounts)\n```\n\nWe can check to see if the synthetic data resemble the observed data.\n\n```{r printCounts}\nhead(ReadCounts)\nhead(bReads)\n```\n\nTo generate the null distribution for any statistic, we then generate many (say 1000) or these samples.\n\nIf we want to generate data under the non-Null distribution, we proceed in exactly the same way except the we compute the mean and SD of each gene for each condition.\n\n```{r meanVarNonNull}\nmeansHS=rowMeans(ReadProp[,1:6])\nmeansPT=rowMeans(ReadProp[,7:12])\nSDsHS=apply(ReadProp[,1:6],1,sd)\nSDsPT=apply(ReadProp[,7:12],1,sd)\n```\n\nWe then generate the read proportions and read count means and the means in the same way, but using both sets of means and SDs.\n\n\n```{r genProportionsNon}\nbPropNon=ReadProp\nbMeansNon=bProp\nfor (i in 1:nrow(ReadProp)) bPropNon[i,]=c(rnorm(6,meansHS[i],SDsHS[i]),rnorm(6,meansPT[i],SDsPT[i]))\nfor (i in 1:ncol(bPropNon))  bMeansNon[,i]=bPropNon[,i]*libSizes[i]\nbMeansNon[bMeansNon<=0.25]=0.25\n```\n\nFinally, we generate our samples as Poisson with our generated mean count.  (Note that it is important tat bMeans is a matrix and not a dataframe.)\n\n```{r PoissonSampsNon}\nbReadsNon=matrix(rpois(nn,bMeansNon),ncol=ncol(bMeansNon))\ncolnames(bReadsNon)=colnames(ReadCounts)\n```\n\nWe can check to see if the synthetic data resemble the observed data.\n\n```{r printCountsNon}\nhead(ReadCounts)\nhead(bReadsNon)\n```\nAs always, we end with session information.\n\n## Session Information\n\n```{r sessionInfo}\nsessionInfo()\n```\n\n\n\n\n\n",
    "created" : 1465411204636.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2506807148",
    "id" : "1F6EA2E5",
    "lastKnownWriteTime" : 1465393491,
    "last_content_update" : 1465393491,
    "path" : "~/gitrepo/bootcamp-central/web/2016/day3/docs/BootstrapRNAseq.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}