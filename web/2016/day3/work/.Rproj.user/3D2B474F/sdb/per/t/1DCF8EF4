{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R Lab 1\"\nauthor: \"Naomi Altman <br>   \nnsa1@psu.edu\"\ndate: \"June 7, 2016\"\noutput: ioslides_presentation\ncss: styles.css\n---\n\n## Getting Started\n\nSince many of you are new to R and R Studio, we are going to start by doing some set-up.  We will then discuss some of the basics of simulation.\n\n1. Basic set-up of R and R Studio\n2. R Markdown and knitr\n3. Thinking about simulation\n4. Setting up the computation\n5. Doing the simulation\n6. Interpreting the simulation results\n7. Improving the simulation\n8. Reproducibility\n\n\n## R and R Studio\n\nIf you installed R and R Studio, then clicking on R Studio should open the R Studio window system.\n\nThere are 5 pieces to the window system:\n\n1. The pulldown menus on the top.\n2. The editor window.\n3. The console or R execution window.\n4. The Environment/History window\n5. The display window.\n\nAll of the windows also support multiple tabs.\n\n## R and R Studio S2\n\nIt is recommended to start a new R Studio Project (using the File menu) for each of your projects.  This keeps a separate history and working directory for the project.\n\nAt times I have had problems with projects.  This appears to be some incompatibility between the versions of R, R Studio and Mac OS.  If reinstalling R and R Studio does not work, I create a folder using the Finder, and use the Session menu to move to that directory. \n\nI then save my work in this directory using the File menu.\n\n## R and R Studio S3\n\nTo promote both readability and reproducibility of our analyses, we will always write our code using R Markdown.  \n\nLets start by creating a new R Markdown file using the File menu.\n\nIf *knitr* and *markdown* are not yet installed on your computer, you will be prompted to install them.  \n\nSave your new file with the name \"Simulation1.rmd\" and use the default \"html\" format.  \n\n## R with Markdown\n\nThere are 3 parts to an R Markdown file:\n\n1. The header information\n2. Text \n3. R code chunks\n\n## R with Markdown: header\n\nThe header is used to create a title for your document and to set some basic parameters, such as the type of output.\n\nI composed the lecture using the \"Presentation\" option for setting up the document.  However, usually I use \"html_document\".\n\nIf you know *css* you can attach a *css* file to enhance the formatting.\n\nThere are a lot of other options.\n\n## R with Markdown: text\n\nText is just text, but it can be enhanced with html commands, mathematical expressions, etc.\n\nFor example, \\$ \\\\pi \\$ would be rendered as $\\pi$.\n\n## R with Markdown: text with embedded R code\n\nR code can be embedded in the text using  \\` r command \\`   e.g. \n\nThe sine of $\\pi$ is \\' r round(sin(pi),2) \\'\n\nis rendered as\n\nThe sine of $\\pi$ is `r round(sin(pi),2)`\n\n## R with Markdown: Code Chunks\n\nCode chunks are the actual programs that you are running in R.\n\n Each code chunk starts with\n \n \\` \\` \\` \\{ r label, options \\}\n \nand ends with\n\n\\` \\` \\`.  \n\ne.g.\n\n\\` \\` \\` \\{ r ChunkOne, eval=TRUE \\}  <br>\n    x=2 <br>\n    rnorm(3,mean=x) <br>\n    \\` \\` \\` \n    \n  The code and output are imbedded in the document.\n  \n```{r ChunkOne, eval=TRUE}\n    x=2 \n    rnorm(3,mean=x)\n```\n\n## R with Markdown: Exercise\n\nLets do the first part of the simulation study using the R Markdown file you just created.\n\nHere is what you need to do.  Use a separate code chunk for each step, making sure there is explanatory text before each chunk.\n\n1. Generate the phenotypic scores as 20 random normals.  Call this vector *pheno*.\n2. Generate the gene expression scores as a matrix with 1000 rows (genes) and 20 columns (samples). Call this matrix *genes*.\n3. Compute the 1000 correlations between the phenotypic scores and the gene expression scores. Note that you will need to transpose the gene expression matrix to do this.  Call the correlations *cors*.\n\n## R with Markdown: Exercise S2\n\nWe can readily imbed plots in our output just by plotting in a code chunk.\n\nSo:\n 4. Plot a histogram of the correlations.\n\n## What matters, what doesn't?\n\nWhat are the mean and variance of the Normal distribution we used to generate the data?\n\nDo real genes all have the same mean expression and variance?\n\nWhich differences between real gene expression values and our simulated values matter and which ones do not in using the synthetic data to understand how the statistical method will perform with real data?\n\n## Generating Random Numbers\n\nEach of us should obtain slightly different results.\n\nHow can we all get the same results?\n\n## Generating Random Numbers: setting a seed\n\nSetting a seed for the random number generator should give us all the same result.\n\nThis is useful for e.g. checking code or situations in which you may need to rerun the code.\n\n## Generating Random Numbers: setting a seed S2\n\n```{r setSeed}\n\nrnorm(5)\nset.seed(2016)\nrnorm(5)\nset.seed(2016)\nrnorm(5)\n```\n\n\n## Selecting the most correlated genes\n\nThe next step in my analysis was to pick the 10 genes with the largest correlation (in absolute value).\n\nI used the *order* command.\n\n*x[order(x)]* sorts the vector *x* in ascending order.\n\n*x[order(x,descending=TRUE)]* sorts the vector *x* in ascending order.\n\n*order(x,descending=TRUE)* gives the indices of *x* corresponding to the largest value, next largest, etc.\n\nWe will use this with *abs(cors)* to find the 10 genes with the largest absolute correlations.\n\nLets call these genes *sigGenes*.\n\n## Fitting the regression\n\nThe final set in the analysis was the linear regression.  This can be \ndone using the command\n\n*regout=lm(pheno~t(sigGenes))*\n\nLets also compute the R^2^ for this regression which is the ratio variance of the fitted values (*fitted(regout)*) to the variance of the phenotypes.\n\n## Doing a simulation study\n\nSince the phenotypic scores and gene expression values have no association, we have just generated one sample from the NULL distribution for any test of association between gene expression and phenotypic score for this setting (20 samples, 1000 genes, everything Normally distributed)\n\nLets obtain the null distribution for:\n\n1. The largest absolute correlation\n2. The largest correlation \n3. The smallest correlation\n4. The R^2^ of the regression after selecting the 10 genes with highest absolute correlation\n\n## Doing a simulation study S2\n\nTo generate the null distribution by simulation, we need to repeat the computations many times.  \n\nWe could do this using a *for* loop or the *apply* command.\n\nWe could make our code cleaner by writing an R function.\n\n## Doing a simulation study S3\n\nMy function has arguments sample size, number of genes and number of selected genes.  It outputs the maximum absolute correlation and the minimum and maximum correlations and the R^2^ of the regression.\n\nFor example, here is my code chunk:\n\n```{r simFunction}\nsimR2=function(nsamp=20,ngene=1000,nsel=10){\n  if (nsel >= nsamp-1) stop(\"The number of genes selected must \n                            be less than the sample size\")\n  pheno=rnorm(nsamp)\n  genes=matrix(rnorm(nsamp*ngene),ncol=nsamp)\n  cors=cor(t(genes),pheno)\n  selgenes=order(cors,decreasing=TRUE)[1:nsel]\n  sigGenes=genes[selgenes,]\n  R2=var(fitted(lm(pheno~t(sigGenes))))/var(pheno)\n  c(maxAbsR=max(abs(cors)),minR=min(cors),maxR=max(cors),Rsq=R2)\n}\n```\n  \n\n## Doing the simulation study S4\n\nNow all we have to do is to repeat the simulation multiple times and save the results.  I usually do this by setting up a matrix to save the results and using a *for* loop.\n\ne.g.\n\n```{r runSim}\nsimN20G1000S10=matrix(nrow=1000,ncol=4)\nfor (i in 1:1000) simN20G1000S10[i,]=simR2(nsamp=20,ngene=1000,nsel=10)\n```\n\n## Doing the simulation study S5\n\nNow that we have an estimate of the sampling distribution of some of the relevant quantities when the null distribution is true, how can we use them?\n\n```{r histNULL,echo=FALSE}\npar(mfrow=c(2,2))\nhist(simN20G1000S10[,1], nclass=50,main=\"Distribution of Largest Absolute Correlation\",xlab=\"Maximum Absolute Correlation\")\nhist(simN20G1000S10[,2], nclass=50,main=\"Distribution of Smallest Correlation\",xlab=\"Minimum Correlation\")\nhist(simN20G1000S10[,3], nclass=50,main=\"Distribution of Largest Correlation\",xlab=\"Maximum Correlation\")\nhist(simN20G1000S10[,4], nclass=50,main=\"Distribution of R-square of Selected Genes\",xlab=\"R-square\")\n```\n\n## Doing the simulation study S6\n\nThe simplest thing we can do is to compute a p-value based on the sampling distribution.\n\nFor example, if the largest absolute correlation between phenotypic score and gene expression is 0.68, the p-value for this is the proportion of our simulations that produced a value at least as large.\n\nThe p-value is `r round(mean(simN20G1000S10[,1]>=.68),4)`.\n\nAlthough the 0.68 would be a large correlation if there were only one gene being tested, it is a fairly typical value for the maximum when there are 1000.\n\n## Improving reproducibility\n\n1. Use R Markdown or similar software and include lots of explanatory text between the code chunks.\n\n2. Publish your R Markdown script along with your data as supplemental materials.\n\n3. In simulations, set a seed so that another user can generate identical results.\n\n4. Your last code chunk should end with *sessionInfo()*.\n\n## Session Information\n\n```{r sessioninfo}\nsessionInfo()\n```\n\n\n## Improving the simulation study\n\nOur sample was generated assuming that both the phenotypic scores and gene expression values are Normally distributed.  \n\nAs well, all of our genes are independent of each other.\n\nThe simulation study is supposed to be a model of our biological system.  So we need to capture the important aspects of the system.\n\nWe also need to capture the data generation and analysis pipeline.\n\nThis will be the topic of the next lab.\n\n## Session Information\n\n```{r sessionInfo}\nsessionInfo()\n```\n",
    "created" : 1465408556066.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2274418673",
    "id" : "1DCF8EF4",
    "lastKnownWriteTime" : 1465408776,
    "last_content_update" : 1465408776372,
    "path" : "~/gitrepo/bootcamp-central/web/2016/day3/docs/R lab 1.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}